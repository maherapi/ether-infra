{{- if .Values.syncNodes.enabled }}
{{- range $clientName, $clientConfig := .Values.syncNodes.clients }}
{{- if $clientConfig.enabled }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "ethereum-infrastructure.syncNodeName" $clientName }}
  labels:
    {{- include "ethereum-infrastructure.syncNodeLabels" $ | nindent 4 }}
    client: {{ $clientName }}
spec:
  serviceName: {{ include "ethereum-infrastructure.syncNodeName" $clientName }}-headless
  replicas: {{ $clientConfig.replicas }}
  selector:
    matchLabels:
      {{- include "ethereum-infrastructure.selectorLabels" $ | nindent 6 }}
      app.kubernetes.io/component: sync-node
      client: {{ $clientName }}
  template:
    metadata:
      labels:
        {{- include "ethereum-infrastructure.syncNodeLabels" $ | nindent 8 }}
        client: {{ $clientName }}
      annotations:
        {{- with $.Values.syncNodes.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        checksum/config: {{ include (print $.Template.BasePath "/sync-nodes/configmap.yaml") $ | sha256sum }}
    spec:
      {{- include "ethereum-infrastructure.podSecurityContext" $ | nindent 6 }}
      serviceAccountName: {{ include "ethereum-infrastructure.serviceAccountName" $ }}
      {{- with $.Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - name: {{ $clientName }}
        image: {{ include "ethereum-infrastructure.image" $clientConfig.image }}
        imagePullPolicy: {{ $.Values.global.imagePullPolicy }}
        {{- include "ethereum-infrastructure.securityContext" $ | nindent 8 }}
        ports:
        - name: rpc
          containerPort: {{ (fromYaml (include "ethereum-infrastructure.clientConfig" $clientName)).ports.rpc }}
          protocol: TCP
        - name: ws
          containerPort: {{ (fromYaml (include "ethereum-infrastructure.clientConfig" $clientName)).ports.ws }}
          protocol: TCP
        - name: metrics
          containerPort: {{ (fromYaml (include "ethereum-infrastructure.clientConfig" $clientName)).ports.metrics }}
          protocol: TCP
        - name: p2p
          containerPort: 30303
          protocol: TCP
        - name: p2p-udp
          containerPort: 30303
          protocol: UDP
        command:
        {{- if eq $clientName "geth" }}
        - /usr/local/bin/geth
        {{- else if eq $clientName "nethermind" }}
        - /nethermind/Nethermind.Runner
        {{- else if eq $clientName "erigon" }}
        - /usr/local/bin/erigon
        {{- else if eq $clientName "besu" }}
        - /opt/besu/bin/besu
        {{- end }}
        args:
        {{- toYaml $clientConfig.args | nindent 8 }}
        {{- if include "ethereum-infrastructure.bootnodes" $ }}
        - "--bootnodes={{ include "ethereum-infrastructure.bootnodes" $ }}"
        {{- end }}
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        volumeMounts:
        - name: data
          mountPath: /data
        - name: config
          mountPath: /config
          readOnly: true
        {{- if $.Values.ethereum.genesis }}
        - name: genesis
          mountPath: /genesis
          readOnly: true
        {{- end }}
        livenessProbe:
          httpGet:
            path: {{ (fromYaml (include "ethereum-infrastructure.clientConfig" $clientName)).healthPath }}
            port: rpc
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: {{ (fromYaml (include "ethereum-infrastructure.clientConfig" $clientName)).healthPath }}
            port: rpc
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        {{- include "ethereum-infrastructure.resources" $clientConfig.resources | nindent 8 }}
      volumes:
      - name: config
        configMap:
          name: {{ include "ethereum-infrastructure.fullname" $ }}-{{ $clientName }}-config
      {{- if $.Values.ethereum.genesis }}
      - name: genesis
        configMap:
          name: {{ include "ethereum-infrastructure.fullname" $ }}-genesis
      {{- end }}
      {{- include "ethereum-infrastructure.nodeSelector" $ | nindent 6 }}
      {{- include "ethereum-infrastructure.tolerations" $ | nindent 6 }}
      {{- include "ethereum-infrastructure.affinity" (dict "antiAffinity" $.Values.syncNodes.antiAffinity "component" "sync-node" "Values" $.Values) | nindent 6 }}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ include "ethereum-infrastructure.storageClass" $clientConfig.storage }}
      resources:
        requests:
          storage: {{ $clientConfig.storage.size }}
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      partition: 0
{{- end }}
{{- end }}
{{- end }}
