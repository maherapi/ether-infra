# Istio Service Mesh Helmfile
# Deploys Istio control plane, gateways, and service mesh configurations

environments:
  local:
    values:
      - ../environments/local.yaml
  staging:
    values:
      - ../environments/staging.yaml
  production:
    values:
      - ../environments/production.yaml

---
releases:
  # Istio Base (CRDs and base configurations)
  - name: istio-base
    condition: "{{ .Values.istio.enabled }}"
    namespace: "{{ .Values.global.namespaces.istio }}"
    chart: "istio/base"
    version: "1.20.1"
    values:
      - defaultRevision: default
      - global:
          meshID: mesh1
          multiCluster:
            clusterName: "{{ .Environment.Name }}"
          network: "{{ .Environment.Name }}-network"

  # Istio Control Plane (istiod)
  - name: istiod
    condition: "{{ .Values.istio.enabled }}"
    namespace: "{{ .Values.global.namespaces.istio }}"
    chart: "istio/istiod"
    version: "1.20.1"
    needs:
      - istio-base
    values:
      - pilot:
          resources: "{{ .Values.istio.components.istiod.resources }}"
          env:
            PILOT_TRACE_SAMPLING: "{{ eq .Environment.Name \"local\" | ternary \"100\" \"1\" }}"
            PILOT_ENABLE_WORKLOAD_ENTRY_AUTOREGISTRATION: true
      - global:
          meshID: mesh1
          multiCluster:
            clusterName: "{{ .Environment.Name }}"
          network: "{{ .Environment.Name }}-network"
          logging:
            level: "{{ eq .Environment.Name \"local\" | ternary \"debug\" \"info\" }}"
      - telemetry:
          v2:
            enabled: true
            prometheus:
              configOverride:
                metric_relabeling_configs:
                  - source_labels: [__name__]
                    regex: '.*_bucket'
                    action: drop

  # Istio Ingress Gateway
  - name: istio-ingressgateway
    condition: "{{ and .Values.istio.enabled .Values.istio.components.ingressGateway.enabled }}"
    namespace: "{{ .Values.global.namespaces.istio }}"
    chart: "istio/gateway"
    version: "1.20.1"
    needs:
      - istiod
    values:
      - replicaCount: "{{ .Values.istio.components.ingressGateway.replicas }}"
      - resources: "{{ .Values.istio.components.ingressGateway.resources }}"
      - service:
          type: "{{ eq .Environment.Name \"local\" | ternary \"NodePort\" \"LoadBalancer\" }}"
          ports:
            - name: status-port
              port: 15021
              protocol: TCP
              targetPort: 15021
            - name: http2
              port: 80
              protocol: TCP
              targetPort: 8080
            - name: https
              port: 443
              protocol: TCP
              targetPort: 8443
      - affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 100
                podAffinityTerm:
                  labelSelector:
                    matchLabels:
                      app: istio-ingressgateway
                  topologyKey: kubernetes.io/hostname
      - labels:
          app: istio-ingressgateway
          istio: ingressgateway

  # Istio Egress Gateway (optional for staging/production)
  - name: istio-egressgateway
    condition: "{{ and .Values.istio.enabled .Values.istio.components.egressGateway.enabled }}"
    namespace: "{{ .Values.global.namespaces.istio }}"
    chart: "istio/gateway"
    version: "1.20.1"
    needs:
      - istiod
    values:
      - replicaCount: "{{ .Values.istio.components.egressGateway.replicas }}"
      - resources: "{{ .Values.istio.components.egressGateway.resources }}"
      - service:
          type: ClusterIP
          ports:
            - name: status-port
              port: 15021
              protocol: TCP
              targetPort: 15021
            - name: http2
              port: 80
              protocol: TCP
              targetPort: 8080
            - name: https
              port: 443
              protocol: TCP
              targetPort: 8443
      - labels:
          app: istio-egressgateway
          istio: egressgateway

  # Ethereum RPC Gateway Configuration
  - name: ethereum-gateway
    condition: "{{ and .Values.istio.enabled .Values.istio.gateway.enabled }}"
    namespace: "{{ .Values.global.namespaces.ethereum }}"
    chart: "./charts/istio-gateway"
    needs:
      - istio-ingressgateway
    values:
      - gateway:
          name: ethereum-gateway
          selector:
            istio: ingressgateway
          servers:
            - port:
                number: 80
                name: http
                protocol: HTTP
              hosts: "{{ .Values.istio.gateway.hosts }}"
              {{- if .Values.istio.gateway.tls.enabled }}
              tls:
                httpsRedirect: true
            - port:
                number: 443
                name: https
                protocol: HTTPS
              hosts: "{{ .Values.istio.gateway.hosts }}"
              tls:
                mode: SIMPLE
                credentialName: ethereum-tls-cert
              {{- end }}

  # Virtual Services for RPC routing
  - name: ethereum-virtualservice
    condition: "{{ and .Values.istio.enabled .Values.istio.gateway.enabled }}"
    namespace: "{{ .Values.global.namespaces.ethereum }}"
    chart: "./charts/istio-virtualservice"
    needs:
      - ethereum-gateway
    values:
      - virtualService:
          name: ethereum-rpc
          hosts: "{{ .Values.istio.gateway.hosts }}"
          gateways:
            - ethereum-gateway
          http:
            - match:
                - uri:
                    prefix: "/rpc"
              route:
                - destination:
                    host: ethereum-serve-nodes
                    port:
                      number: 8545
              fault:
                delay:
                  percentage:
                    value: "{{ eq .Environment.Name \"local\" | ternary \"0\" \"0.1\" }}"
                  fixedDelay: 5s
              retries:
                attempts: 3
                perTryTimeout: 30s
              timeout: 60s

  # Istio Security Policies (for staging/production)
  - name: istio-security
    condition: "{{ and .Values.istio.enabled .Values.istio.security.peerAuthentication.enabled }}"
    namespace: "{{ .Values.global.namespaces.ethereum }}"
    chart: "./charts/istio-security"
    needs:
      - istiod
    values:
      - peerAuthentication:
          enabled: "{{ .Values.istio.security.peerAuthentication.enabled }}"
          mode: "{{ .Values.istio.security.peerAuthentication.mode }}"
      - authorizationPolicies:
          enabled: "{{ .Values.istio.security.authorizationPolicies.enabled }}"
          rules:
            - name: allow-rpc-access
              action: ALLOW
              rules:
                - to:
                    - operation:
                        methods: ["GET", "POST"]
                        paths: ["/rpc/*", "/health"]
            - name: deny-direct-access
              action: DENY
              rules:
                - to:
                    - operation:
                        paths: ["/admin/*"]

repositories:
  - name: istio
    url: https://istio-release.storage.googleapis.com/charts

helmDefaults:
  createNamespace: true
  wait: true
  timeout: 600
  atomic: true
  cleanupOnFail: true
